{"version":3,"file":"Accordion.stories-d13be187.js","sources":["../../../../packages/react/src/Accordion/AccordionContext.tsx","../../../../packages/react/src/Accordion/AccordionSection.tsx","../../../../packages/react/src/Accordion/useFocusWithArrows.tsx","../../../../packages/react/src/Accordion/Accordion.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport { HeadingLevel } from '../Heading/Heading'\n\nexport interface AccordionContextValue {\n  headingLevel: HeadingLevel\n  section?: boolean\n}\n\nconst defaultValues: AccordionContextValue = {\n  headingLevel: 1,\n  section: true,\n}\n\nconst AccordionContext = createContext(defaultValues)\n\nexport default AccordionContext\n","/**\n * @license EUPL-1.2+\n * Copyright (c) 2023 Gemeente Amsterdam\n */\n\nimport { ChevronDown } from '@amsterdam/design-system-react-icons'\nimport clsx from 'clsx'\nimport { ForwardedRef, forwardRef, HTMLAttributes, PropsWithChildren, useContext, useId, useState } from 'react'\nimport AccordionContext from './AccordionContext'\nimport { getHeadingElement } from '../Heading/Heading'\nimport { Icon } from '../Icon/Icon'\n\nexport interface AccordionSectionProps extends HTMLAttributes<HTMLElement> {\n  label: string\n  expanded?: boolean\n}\n\nexport const AccordionSection = forwardRef(\n  (\n    { label, expanded = false, children, className, ...otherProps }: PropsWithChildren<AccordionSectionProps>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const { headingLevel, section } = useContext(AccordionContext)\n    const [isExpanded, setIsExpanded] = useState(expanded)\n\n    const HeadingX = getHeadingElement(headingLevel)\n    const id = useId()\n    const buttonId = `button-${id}`\n    const panelId = `panel-${id}`\n\n    return (\n      <div className={clsx('amsterdam-accordion__section', className)} ref={ref} {...otherProps}>\n        <HeadingX className={'amsterdam-accordion__header'}>\n          <button\n            aria-controls={panelId}\n            aria-expanded={isExpanded}\n            className=\"amsterdam-accordion__button\"\n            id={buttonId}\n            onClick={() => setIsExpanded(!isExpanded)}\n            type=\"button\"\n          >\n            {label}\n            <Icon svg={ChevronDown} size=\"level-5\" />\n          </button>\n        </HeadingX>\n        {section ? (\n          <section\n            id={panelId}\n            aria-labelledby={buttonId}\n            className={clsx('amsterdam-accordion__panel', { 'amsterdam-accordion__panel--expanded': isExpanded })}\n          >\n            {children}\n          </section>\n        ) : (\n          <div\n            id={panelId}\n            aria-labelledby={buttonId}\n            className={clsx('amsterdam-accordion__panel', { 'amsterdam-accordion__panel--expanded': isExpanded })}\n          >\n            {children}\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nAccordionSection.displayName = 'AccordionSection'\n","/**\n * @license EUPL-1.2+\n * Copyright (c) 2023 Gemeente Amsterdam\n */\n\nimport type { KeyboardEvent, RefObject } from 'react'\n\nexport const KeyboardKeys = {\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n  ArrowRight: 'ArrowRight',\n  ArrowLeft: 'ArrowLeft',\n  Home: 'Home',\n  End: 'End',\n}\n\n/**\n * Focus on children with arrow keys and home / end buttons.\n *\n * @param ref Component ref\n * @param rotating Jump to first item from last or vice versa\n * @param horizontally In case you need to navigate horizontally, using left / right arrow buttons\n */\nconst useFocusWithArrows = (ref: RefObject<HTMLDivElement>, rotating = false, horizontally = false) => {\n  const next = horizontally ? KeyboardKeys.ArrowRight : KeyboardKeys.ArrowDown\n  const previous = horizontally ? KeyboardKeys.ArrowLeft : KeyboardKeys.ArrowUp\n  const keyDown = (e: KeyboardEvent) => {\n    if (ref.current) {\n      const element = ref.current\n\n      const { activeElement } = window.document\n      const focusableEls: Array<Element> = Array.from(element.querySelectorAll('.amsterdam-accordion__button'))\n\n      const getIndex = (el: Element | null) => {\n        return el && focusableEls.includes(el) ? focusableEls.indexOf(el) : 0\n      }\n\n      let el\n\n      switch (e.key) {\n        case next: {\n          if (getIndex(activeElement) !== focusableEls.length - 1) {\n            el = focusableEls[getIndex(activeElement) + 1]\n            // If there is nothing focussed yet, set the focus on the first element\n            if (activeElement && !focusableEls.includes(activeElement)) {\n              el = focusableEls[0]\n            }\n          } else if (rotating) {\n            el = focusableEls[0]\n          }\n\n          break\n        }\n\n        case previous: {\n          if (getIndex(activeElement) !== 0) {\n            el = focusableEls[getIndex(activeElement) - 1]\n          } else if (rotating) {\n            el = focusableEls[focusableEls.length - 1]\n          }\n          break\n        }\n\n        case KeyboardKeys.Home: {\n          el = focusableEls[0]\n          break\n        }\n\n        case KeyboardKeys.End: {\n          el = focusableEls[focusableEls.length - 1]\n          break\n        }\n\n        default:\n      }\n\n      if (\n        (e.key === KeyboardKeys.ArrowDown ||\n          e.key === KeyboardKeys.ArrowUp ||\n          e.key === KeyboardKeys.ArrowLeft ||\n          e.key === KeyboardKeys.ArrowRight ||\n          e.key === KeyboardKeys.Home ||\n          e.key === KeyboardKeys.End) &&\n        el instanceof HTMLElement\n      ) {\n        el.focus()\n        e.preventDefault()\n      }\n    }\n  }\n\n  return {\n    keyDown,\n  }\n}\n\nexport default useFocusWithArrows\n","/**\n * @license EUPL-1.2+\n * Copyright (c) 2023 Gemeente Amsterdam\n */\n\nimport clsx from 'clsx'\nimport type { ForwardRefExoticComponent, ReactNode, RefAttributes } from 'react'\nimport { ForwardedRef, forwardRef, HTMLAttributes, PropsWithChildren, useImperativeHandle, useRef } from 'react'\nimport AccordionContext from './AccordionContext'\nimport { AccordionSection } from './AccordionSection'\nimport useFocusWithArrows from './useFocusWithArrows'\nimport { HeadingLevel } from '../Heading/Heading'\n\nexport interface AccordionProps extends HTMLAttributes<HTMLDivElement> {\n  children?: ReactNode\n  headingLevel: HeadingLevel\n  section?: boolean\n}\n\nexport interface AccordionComponent\n  extends ForwardRefExoticComponent<\n    PropsWithChildren<HTMLAttributes<HTMLDivElement>> & RefAttributes<HTMLDivElement> & AccordionProps\n  > {\n  Section: typeof AccordionSection\n}\n\nexport const Accordion = forwardRef(\n  ({ children, className, headingLevel, section = true }: AccordionProps, ref: ForwardedRef<HTMLDivElement>) => {\n    const innerRef = useRef<HTMLDivElement>(null)\n\n    // use a passed ref if it's there, otherwise use innerRef\n    useImperativeHandle(ref, () => innerRef.current as HTMLDivElement)\n\n    const { keyDown } = useFocusWithArrows(innerRef, true)\n    return (\n      <AccordionContext.Provider value={{ headingLevel: headingLevel, section: section }}>\n        <div className={clsx('amsterdam-accordion', className)} onKeyDown={keyDown} ref={innerRef}>\n          {children}\n        </div>\n      </AccordionContext.Provider>\n    )\n  },\n) as AccordionComponent\n\nAccordion.displayName = 'Accordion'\n\nAccordion.Section = AccordionSection\nAccordion.Section.displayName = 'Accordion.Section'\n"],"names":["defaultValues","AccordionContext","createContext","AccordionContext$1","AccordionSection","forwardRef","label","expanded","children","className","otherProps","ref","headingLevel","section","useContext","isExpanded","setIsExpanded","useState","HeadingX","getHeadingElement","id","useId","buttonId","panelId","jsxs","clsx","jsx","Icon","ChevronDown","KeyboardKeys","useFocusWithArrows","rotating","horizontally","next","previous","e","element","activeElement","focusableEls","getIndex","el2","el","useFocusWithArrows$1","Accordion","innerRef","useRef","useImperativeHandle","keyDown"],"mappings":"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"}