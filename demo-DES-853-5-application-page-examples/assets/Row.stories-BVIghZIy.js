import{j as s}from"./jsx-runtime-BlAj40OV.js";import{c as y}from"./clsx-B-dksMZM.js";import{r as x}from"./index-Cs7sjTYM.js";import{B as _}from"./Button-fZZcNY7w.js";import{P as h}from"./Paragraph-BWS5kDPY.js";const o=x.forwardRef(({as:e="div",children:c,className:u,gap:d="medium",wrap:f=!1,...g},w)=>s.jsx(e,{...g,ref:w,className:y("ams-row",`ams-row--${d}`,f&&"ams-row--wrap",u),children:c}));o.displayName="Row";try{o.displayName="Row",o.__docgenInfo={description:"",displayName:"Row",props:{as:{defaultValue:null,description:"The HTML element to use.",name:"as",required:!1,type:{name:"enum",value:[{value:'"article"'},{value:'"div"'},{value:'"section"'}]}},gap:{defaultValue:{value:"medium"},description:"The amount of vertical space between items.",name:"gap",required:!1,type:{name:"string"}},wrap:{defaultValue:{value:"false"},description:"Whether items of the row can wrap onto multiple lines.",name:"wrap",required:!1,type:{name:"Boolean"}}}}}catch{}const v=Array.from(Array(3).keys()).map(e=>s.jsxs(_,{children:["Button ",e+1]},e)),R=Array.from(Array(4).keys()).map(e=>s.jsxs(h,{className:"ams-docs-pink-box",children:["Wrapping row item ",e+1]},e)),j={title:"Components/Layout/Row",component:o,args:{children:v},argTypes:{gap:{control:"radio",options:["extra-small","small","medium","large","extra-large"]}}},r={},a={args:{children:R,wrap:!0}};var t,n,m;r.parameters={...r.parameters,docs:{...(t=r.parameters)==null?void 0:t.docs,source:{originalSource:"{}",...(m=(n=r.parameters)==null?void 0:n.docs)==null?void 0:m.source}}};var p,l,i;a.parameters={...a.parameters,docs:{...(p=a.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    children: FourBoxes,
    wrap: true
  }
}`,...(i=(l=a.parameters)==null?void 0:l.docs)==null?void 0:i.source}}};const B=["Default","Wrapping"],A=Object.freeze(Object.defineProperty({__proto__:null,Default:r,Wrapping:a,__namedExportsOrder:B,default:j},Symbol.toStringTag,{value:"Module"}));export{A as R,a as W};
