/**
 * @license EUPL-1.2+
 * Copyright Gemeente Amsterdam
 */

@import "../../common/input-label-focus";
@import "../../common/hide-input";
@import "../../common/text-rendering";

.ams-radio__input {
  @include hide-input;
  @include input-label-focus;
}

// Default
.ams-radio__label {
  color: var(--ams-radio-color);
  cursor: pointer;
  display: inline-flex;
  font-family: var(--ams-radio-font-family);
  font-size: var(--ams-radio-font-size);
  font-weight: var(--ams-radio-font-weight);
  gap: var(--ams-radio-gap);
  line-height: var(--ams-radio-line-height);
  outline-offset: var(--ams-radio-outline-offset);
  text-decoration-thickness: var(--ams-radio-text-decoration-thickness);
  text-underline-offset: var(--ams-radio-text-underline-offset);

  @include text-rendering;
}

.ams-radio__icon-container {
  block-size: var(--ams-radio-icon-container-block-size);
  display: flex;
  flex: none;
  inline-size: var(--ams-radio-icon-container-inline-size);
}

.ams-radio__icon {
  circle:first-child {
    stroke: var(--ams-radio-icon-outer-stroke);
    stroke-width: 0.15rem;
  }

  circle:nth-child(2) {
    display: none;
    fill: var(--ams-radio-icon-inner-fill);
  }
}

// Default hover
.ams-radio__label:hover {
  color: var(--ams-radio-hover-color);
  text-decoration-line: var(--ams-radio-hover-text-decoration-line);

  .ams-radio__icon circle:first-child {
    stroke: var(--ams-radio-icon-hover-outer-stroke);
  }

  .ams-radio__icon circle:nth-child(2) {
    fill: var(--ams-radio-icon-hover-inner-fill);
  }
}

// Invalid
.ams-radio__input[aria-invalid="true"] + .ams-radio__label {
  .ams-radio__icon circle:first-child {
    stroke: var(--ams-radio-icon-invalid-outer-stroke);
  }

  .ams-radio__icon circle:nth-child(2) {
    fill: var(--ams-radio-icon-invalid-inner-fill);
  }
}

// Checked
.ams-radio__input:checked + .ams-radio__label {
  .ams-radio__icon circle:nth-child(2) {
    display: block;
  }
}

// Disabled
.ams-radio__input:disabled + .ams-radio__label {
  color: var(--ams-radio-disabled-color);
  cursor: not-allowed;

  .ams-radio__icon circle:first-child {
    stroke: var(--ams-radio-icon-disabled-outer-stroke);
  }

  .ams-radio__icon circle:nth-child(2) {
    fill: var(--ams-radio-icon-disabled-inner-fill);
  }
}

// Disabled invalid
.ams-radio__input[aria-invalid="true"]:disabled {
  + .ams-radio__label {
    .ams-radio__icon circle:first-child {
      // TODO: currently disabled invalid gets the same styling as disabled. This should get its own styling.
      stroke: var(--ams-radio-icon-disabled-invalid-outer-stroke);
    }

    .ams-radio__icon circle:nth-child(2) {
      // TODO: currently disabled invalid gets the same styling as disabled. This should get its own styling.
      fill: var(--ams-radio-icon-disabled-invalid-inner-fill);
    }
  }
}

// HOVER

// Disabled label hover
.ams-radio__input:disabled + .ams-radio__label:hover {
  text-decoration: none;
}

// Invalid hover
.ams-radio__input[aria-invalid="true"] + .ams-radio__label:hover {
  .ams-radio__icon circle:first-child {
    // TODO: this should be the (currently non-existent) dark red hover color
    stroke: var(--ams-radio-icon-invalid-hover-outer-stroke);
  }

  .ams-radio__icon circle:nth-child(2) {
    // TODO: this should be the (currently non-existent) dark red hover color
    fill: var(--ams-radio-icon-invalid-hover-inner-fill);
  }
}

// Disabled invalid hover
.ams-radio__input[aria-invalid="true"]:disabled + .ams-radio__label:hover {
  .ams-radio__icon circle:first-child {
    // TODO: currently disabled invalid gets the same styling as disabled. This should get its own styling.
    stroke: var(--ams-radio-icon-disabled-invalid-hover-outer-stroke);
  }

  .ams-radio__icon circle:nth-child(2) {
    // TODO: currently disabled invalid gets the same styling as disabled. This should get its own styling.
    fill: var(--ams-radio-icon-disabled-invalid-hover-inner-fill);
  }
}

// FORCED COLORS

// Default
@media (forced-colors: active) {
  .ams-radio__label,
  .ams-radio__label:hover,
  .ams-radio__input[aria-invalid="true"] + .ams-radio__label,
  .ams-radio__input[aria-invalid="true"] + .ams-radio__label:hover {
    .ams-radio__icon {
      circle:first-child {
        stroke: FieldText;
      }

      // These two selectors never target the same element, so it's safe to disable the linter here.
      /* stylelint-disable-next-line no-descending-specificity */
      circle:nth-child(2) {
        fill: FieldText;
      }
    }
  }
}

// Checked
@media (forced-colors: active) {
  .ams-radio__input:checked + .ams-radio__label,
  .ams-radio__input[aria-invalid="true"]:checked + .ams-radio__label:hover {
    .ams-radio__icon {
      circle:first-child {
        stroke: ActiveText;
      }

      // These two selectors never target the same element, so it's safe to disable the linter here.
      /* stylelint-disable-next-line no-descending-specificity */
      circle:nth-child(2) {
        fill: ActiveText;
      }
    }
  }
}

// Disabled
@media (forced-colors: active) {
  .ams-radio__input:disabled + .ams-radio__label,
  .ams-radio__input[aria-invalid="true"]:disabled + .ams-radio__label,
  .ams-radio__input[aria-invalid="true"]:disabled + .ams-radio__label:hover {
    .ams-radio__icon {
      circle:first-child {
        stroke: GrayText;
      }

      // These two selectors never target the same element, so it's safe to disable the linter here.
      /* stylelint-disable-next-line no-descending-specificity */
      circle:nth-child(2) {
        fill: GrayText;
      }
    }
  }
}
